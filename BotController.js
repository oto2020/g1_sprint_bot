// BotController.js
const MainHelper = require('./MainHelper');
const StorageController = require('./StorageController');

class BotController {

  /**
   * —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
   */
  static async createTask(query) {
    try {
      const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');

      // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∏–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
      let sheets = await MainHelper.getAllSheetNamesAndGids();
      let sprintObj = (param1 === 'toCurrent') ?
        sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${MainHelper.getCurrentSprintNumber()} `).test(s.title)) :
        sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${MainHelper.getNextSprintNumber()} `).test(s.title));

      // –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
      let firstEmptyRow = await MainHelper.findFirstEmptyRow(sprintObj.gid, 'C:C');

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π-–≤—Ä–µ–º–µ–Ω–µ–º
      const now = new Date();
      const pad = (n) => String(n).padStart(2, '0');
      const year = now.getFullYear();
      const month = pad(now.getMonth() + 1);
      const day = pad(now.getDate());
      const hours = pad(now.getHours());
      const minutes = pad(now.getMinutes());
      const seconds = pad(now.getSeconds());
      let formattedTimeStamp = `${day}.${month} ${hours}:${minutes}`;

      // –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫—É: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è —Å—Ç—Ä–æ–∫–∏
      let taskId = `${formattedTimeStamp} ${messageId}`;
      let isCompleted = false;
      let taskText = StorageController.tasks[`${chatId}@${messageId}`]; // –î–æ—Å—Ç–∞–µ–º –∏–∑ –∫–µ—à–∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–¥–∞—á–∏)
      let responsibleName = StorageController.users[chatId].department;
      let sourceName = "–í–Ω–µ –ø–ª–∞–Ω–∞";
      let priority = "‚è≥";
      let linkB24 = "";
      let comment = "";
      let status = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è ‚ö†Ô∏è";
      // –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫—É: —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
      let row = [taskId, isCompleted, taskText, responsibleName, sourceName, priority, linkB24, comment, status];
      MainHelper.writeToRange(sprintObj.gid, `A${firstEmptyRow}:I${firstEmptyRow}`, [row]);

      // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
      let newMessage = `‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞:\n\n` +
        `<b>${taskText}</b>\n\n` +
        `<a href="https://docs.google.com/spreadsheets/d/${MainHelper.S_ID}/edit#gid=${sprintObj.gid}&range=B${firstEmptyRow}">${sprintObj.title}, —Å—Ç—Ä–æ–∫–∞ ${firstEmptyRow}</a>\n\n` +
        `<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n` +
        `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è / –ò—Å—Ç–æ—á–Ω–∏–∫,\n` +
        `–°—Ä–æ—á–Ω–æ—Å—Ç—å / –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏</i>`;
      await MainHelper.editMessageText(chatId, messageId, newMessage);

      const keyboardForCreatedTask = {
        inline_keyboard: [
          [
            { text: `${responsibleName}`, callback_data: `showBtns@${chatId}@${messageId}@${sprintObj.gid}@${taskId}@resp` },
            { text: `${sourceName}`, callback_data: `showBtns@${chatId}@${messageId}@${sprintObj.gid}@${taskId}@src` },
          ],
          [
            { text: `${priority}`, callback_data: `showBtns@${chatId}@${messageId}@${sprintObj.gid}@${taskId}@priority` },
            { text: `${status}`, callback_data: `showBtns@${chatId}@${messageId}@${sprintObj.gid}@${taskId}@status` },
          ],
          [
            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: `deleteTask@${chatId}@${messageId}@${sprintObj.gid}@${taskId}` },
          ]
        ]
      };

      await MainHelper.updateTaskButtons(chatId, messageId, keyboardForCreatedTask);

    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ createTask ‚ö†Ô∏è\n`, err.message);
      // throw err;
    }
  }

  // –í—ã–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
  static async showBtns(query) {
    try {
      const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');

      let gid = param1;
      let taskId = param2;
      let buttonsCategory = param3; // resp, src, priority, status

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ id
      let task = await MainHelper.getTaskById(gid, taskId);

      // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, –æ —Ç–æ–º, —á—Ç–æ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
      let aHref = await MainHelper.generateTaskLink(gid, taskId);
      let newMessage = `‚úçÔ∏è –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞) –∑–∞–¥–∞—á–∏:\n\n` +
        `<b>${task.name}</b>\n\n` +
        `${aHref}\n\n` +
        `<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n` +
        `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</i>`;
      await MainHelper.editMessageText(chatId, messageId, newMessage);

      let buttonsInRow = 4; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É –≤ —Ä—è–¥
      let keyboard = [];

      let buttons;
      if (buttonsCategory == 'resp') buttons = StorageController.responsibles;
      if (buttonsCategory == 'src') buttons = StorageController.sources;
      if (buttonsCategory == 'priority') buttons = StorageController.priorities;
      if (buttonsCategory == 'status') buttons = StorageController.statuses;
      
      for (let i = 0; i < buttons.length; i += buttonsInRow) {
        let row = buttons.slice(i, i + buttonsInRow).map((button, buttonIndex) => {
          return {
            text: button,
            callback_data: `change@${chatId}@${messageId}@${gid}@${taskId}@${buttonIndex}`
          };
        });
        keyboard.push(row);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" // this –∑–Ω–∞—á–∏—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–æ –Ω–æ–≤–æ–µ
      keyboard.push([
        {
          text: '–ù–∞–∑–∞–¥',
          callback_data: `showTask@${chatId}@${messageId}@${gid}@${taskId}@thisMsg`
        }
      ]);

      console.log(keyboard);
      await MainHelper.updateTaskButtons(chatId, messageId, {
        inline_keyboard: keyboard
      });

    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ showSrc ‚ö†Ô∏è\n`, err.message);
      // throw err;
    }
  }


  static async deleteTask(query) {
    try {
      const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');

      let gid = param1;
      let taskId = param2;
      let task = await MainHelper.deleteRowBySubstringInA(gid, taskId);
      await MainHelper.bot.deleteMessage(chatId, messageId);
      await MainHelper.bot.sendMessage(
        chatId,
        `‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n` +
        `<b>${task.name}</b>\n\n` +
        `–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task.responsible}\n` +
        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${task.comment}\n` +
        `–°—Ç–∞—Ç—É—Å: ${task.status}\n\n` +
        `${task.sheetName}`,
        { parse_mode: 'HTML' });

    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ deleteTask ‚ö†Ô∏è\n`, err.message);
      // throw err;
    }
  }


  static async showTask(query) {
    try {
      const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');



      let gid = param1;
      let taskId = param2;
      let isThisMessage = param3 === 'thisMsg';

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ id
      let task = await MainHelper.getTaskById(gid, taskId);

      // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, –æ —Ç–æ–º, —á—Ç–æ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
      let aHref = await MainHelper.generateTaskLink(gid, taskId);
      let newMessage = `üëÄ –ó–∞–¥–∞—á–∞:\n\n` +
        `<b>${task.name}</b>\n\n` +
        `${aHref}\n\n` +
        `<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n` +
        `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è / –ò—Å—Ç–æ—á–Ω–∏–∫,\n` +
        `–°—Ä–æ—á–Ω–æ—Å—Ç—å / –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏</i>`;

      const keyboardForCreatedTask = {
        inline_keyboard: [
          [
            { text: `${task.responsible}`, callback_data: `showBtns@${chatId}@${messageId}@${gid}@${taskId}@resp` },
            { text: `${task.source}`, callback_data: `showBtns@${chatId}@${messageId}@${gid}@${taskId}@src` },
          ],
          [
            { text: `${task.priority}`, callback_data: `showBtns@${chatId}@${messageId}@${gid}@${taskId}@priority` },
            { text: `${task.status}`, callback_data: `showBtns@${chatId}@${messageId}@${gid}@${taskId}@status` },
          ],
          [
            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: `deleteTask@${chatId}@${messageId}@${gid}@${taskId}` },
          ]
        ]
      };

      // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (isThisMessage) {
        await MainHelper.editMessageText(chatId, messageId, newMessage);
        await MainHelper.updateTaskButtons(chatId, messageId, keyboardForCreatedTask);
      }


    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ showTask ‚ö†Ô∏è\n`, err.message);
      // throw err;
    }
  }

  static async cancelCreation(query) {
    try {
      const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');
      await MainHelper.bot.deleteMessage(chatId, messageId);
    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ cancelCreation ‚ö†Ô∏è\n`, err.message);
      // throw err;
    }
  }
  static async methodTemplate(query) {
    try {
      const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');

      // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∏–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
      let sheets = await MainHelper.getAllSheetNamesAndGids();

    } catch (err) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ù–ê–ü–ò–°–ê–¢–¨ –ù–ê–ó–í–ê–ù–ò–ï –ú–ï–¢–û–î–ê !!! ‚ö†Ô∏è\n`, err.message);
      // throw err;
    }
  }
};




module.exports = BotController;
