const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');

class GoogleHelper {
  static S_ID;
  static gsapi;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets API
   * @param {string} spreadsheetId ‚Äî ID —Ç–∞–±–ª–∏—Ü—ã
   */
  static async init(spreadsheetId) {
    this.S_ID = spreadsheetId;

    const keyFilePath = path.join(__dirname, 'Keys.json');
    const auth = new google.auth.GoogleAuth({
      keyFile: keyFilePath,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    const client = await auth.getClient();
    this.gsapi = google.sheets({ version: 'v4', auth: client });

    console.log('‚úÖ Google API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
  }


  /**
 * –ü–æ–ª—É—á–∏—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤: –∏–º—è + GID
 */
  static async getAllSheetNamesAndGids() {
    try {
      const response = await this.gsapi.spreadsheets.get({ spreadsheetId: this.S_ID });
      const sheets = response.data.sheets;

      return sheets.map(s => ({
        title: s.properties.title,
        gid: s.properties.sheetId
      }));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤:', error);
      throw error;
    }
  }

  static getIsoWeek(date) {
    const target = new Date(date.valueOf());
    const dayNumber = (target.getDay() + 6) % 7;
    target.setDate(target.getDate() - dayNumber + 3); // —á–µ—Ç–≤–µ—Ä–≥ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏

    const firstThursday = new Date(target.getFullYear(), 0, 4);
    const firstDayNumber = (firstThursday.getDay() + 6) % 7;
    firstThursday.setDate(firstThursday.getDate() - firstDayNumber + 3);

    const diff = target - firstThursday;
    const weekNumber = 1 + Math.round(diff / (7 * 24 * 60 * 60 * 1000));
    const year = target.getFullYear();

    return { week: weekNumber, year };
  }

  static getCurrentSprintNumber() {
    return this.getIsoWeek(new Date()).week;
  }

  static getLastSprintNumber() {
    const today = new Date();
    today.setDate(today.getDate() - 7);
    return this.getIsoWeek(today).week;
  }

  static getNextSprintNumber() {
    const today = new Date();
    today.setDate(today.getDate() + 7);
    return this.getIsoWeek(today).week;
  }

  /**
 * –ó–∞–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
 * @param {string} sheetName ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
 * @param {string} cell ‚Äî –ê–¥—Ä–µ—Å —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ A1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "A1", "B2")
 * @param {string|number} value ‚Äî –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 */
  static async writeToCell(sheetName, cell, value) {
    try {
      const range = `${sheetName}!${cell}`;
      await this.gsapi.spreadsheets.values.update({
        spreadsheetId: this.S_ID,
        range: range,
        valueInputOption: 'RAW',
        resource: {
          values: [[value]]
        }
      });
      console.log(`‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ "${value}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —è—á–µ–π–∫—É ${range}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —è—á–µ–π–∫—É ${cell}:`, error);
      throw error;
    }
  }

  /**
 * –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å—Ç–æ–ª–±—Ü–æ–≤
 * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
 * @param {string} columnRange ‚Äî –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "A:A" –∏–ª–∏ "A:C")
 * @returns {Promise<number>} –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
 */
  static async findFirstEmptyRow(gid, columnRange) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      const rangeAddress = `${sheetName}!${columnRange}`;
      const response = await this.gsapi.spreadsheets.values.get({
        spreadsheetId: this.S_ID,
        range: rangeAddress
      });
      const values = response.data.values || [];
      let rowIndex = 1;
      for (const row of values) {
        if (row.every(cell => cell === '' || cell === undefined)) {
          return rowIndex;
        }
        rowIndex++;
      }
      return rowIndex; // –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${columnRange} –Ω–∞ –ª–∏—Å—Ç–µ —Å GID ${gid}:`, error);
      throw error;
    }
  }


  /**
 * –ó–∞–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
 * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
 * @param {string} range ‚Äî –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ A1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "A1" –∏–ª–∏ "A1:B2")
 * @param {Array<Array<string|number>>} values ‚Äî –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, [['A1', 'B1'], ['A2', 'B2']])
 */
  static async writeToRange(gid, range, values) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      const rangeAddress = `${sheetName}!${range}`;
      await this.gsapi.spreadsheets.values.update({
        spreadsheetId: this.S_ID,
        range: rangeAddress,
        valueInputOption: 'RAW',
        resource: {
          values: values
        }
      });
      console.log(`‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ${rangeAddress}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ${range} –Ω–∞ –ª–∏—Å—Ç–µ —Å GID ${gid}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ –ø–æ GID
   * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
   * @returns {Promise<string|null>} –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∏–ª–∏ null
   */
  static async getSheetNameByGid(gid) {
    try {
      const response = await this.gsapi.spreadsheets.get({ spreadsheetId: this.S_ID });
      const sheet = response.data.sheets.find(s => s.properties.sheetId == gid);
      return sheet ? sheet.properties.title : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ –ø–æ GID:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É (A-J) –ø–æ GID –ª–∏—Å—Ç–∞, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π
   * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
   * @param {string} substring ‚Äî –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ A
   * @returns {Promise<Array<string|number>|null>} –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏ (A-J) –∏–ª–∏ null, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   */
  static async getRowBySubstringInA(gid, substring) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      const rangeAddress = `${sheetName}!A:J`;
      const response = await this.gsapi.spreadsheets.values.get({
        spreadsheetId: this.S_ID,
        range: rangeAddress
      });
      const values = response.data.values || [];
      for (const row of values) {
        const cellA = row[0] || ''; // –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A
        if (typeof cellA === 'string' && cellA.endsWith(substring)) {
          return row.slice(0, 10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç–æ–ª–±—Ü–æ–≤ (A-J)
        }
      }
      console.log(`‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π "${substring}" –≤ —Å—Ç–æ–ª–±—Ü–µ A –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ —Å GID ${gid}`);
      return null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π "${substring}" –≤ —Å—Ç–æ–ª–±—Ü–µ A –Ω–∞ –ª–∏—Å—Ç–µ —Å GID ${gid}:`, error);
    }
  }

  /**
 * –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ substring, –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç task –∏ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
 * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
 * @param {string} substring ‚Äî –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ A
 * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç task —Å –ø–æ–ª—è–º–∏ A‚ÄìJ –∏–ª–∏ null, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
  static async deleteRowBySubstringInA(gid, substring) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const rangeAddress = `${sheetName}!A:J`;
      const response = await this.gsapi.spreadsheets.values.get({
        spreadsheetId: this.S_ID,
        range: rangeAddress
      });

      const values = response.data.values || [];
      const columnNames = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];

      let rowIndex = 0;
      for (const row of values) {
        const cellA = row[0] || '';
        if (typeof cellA === 'string' && cellA.endsWith(substring)) {
          const task = {};
          for (let i = 0; i < 10; i++) {
            task[columnNames[i]] = row[i] ?? '';
          }
          task['sheetName'] = sheetName;
          // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
          await this.gsapi.spreadsheets.batchUpdate({
            spreadsheetId: this.S_ID,
            resource: {
              requests: [
                {
                  deleteDimension: {
                    range: {
                      sheetId: gid,
                      dimension: 'ROWS',
                      startIndex: rowIndex,
                      endIndex: rowIndex + 1
                    }
                  }
                }
              ]
            }
          });

          console.log(`üóëÔ∏è –°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å –ª–∏—Å—Ç–∞ "${sheetName}". Task:`, task);
          return task;
        }
        rowIndex++;
      }

      console.log(`‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∞—è—Å—è –Ω–∞ "${substring}", –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ "${sheetName}"`);
      return null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π "${substring}" –≤ —Å—Ç–æ–ª–±—Ü–µ A:`, error);
      throw error;
    }
  }


  /**
 * –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ substring,
 * –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ (–ø–æ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞) –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç task –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
 * @param {string} substring ‚Äî –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ A
 * @param {string} columnLetter ‚Äî –ë—É–∫–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'B', 'C', ...)
 * @param {string|number} newValue ‚Äî –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —è—á–µ–π–∫–∏
 * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç task —Å –ø–æ–ª—è–º–∏ A‚ÄìJ (–¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è) –∏–ª–∏ null, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
  static async updateCellInRowBySubstringInA(gid, substring, columnLetter, newValue) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const rangeAddress = `${sheetName}!A:J`;
      const response = await this.gsapi.spreadsheets.values.get({
        spreadsheetId: this.S_ID,
        range: rangeAddress
      });

      const values = response.data.values || [];
      const columnNames = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
      const columnIndex = columnNames.indexOf(columnLetter.toUpperCase());

      if (columnIndex === -1) {
        throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞: ${columnLetter}`);
      }

      let rowIndex = 0;
      for (const row of values) {
        const cellA = row[0] || '';
        if (typeof cellA === 'string' && cellA.endsWith(substring)) {
          // –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const task = {};
          for (let i = 0; i < 10; i++) {
            task[columnNames[i]] = row[i] ?? '';
          }
          task['sheetName'] = sheetName;

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å —è—á–µ–π–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const targetCell = `${columnLetter}${rowIndex + 1}`;
          const targetRange = `${sheetName}!${targetCell}`;

          await this.gsapi.spreadsheets.values.update({
            spreadsheetId: this.S_ID,
            range: targetRange,
            valueInputOption: 'RAW',
            resource: {
              values: [[newValue]]
            }
          });

          console.log(`‚úèÔ∏è –Ø—á–µ–π–∫–∞ ${targetCell} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º "${newValue}". Task:`, task);
          return task;
        }
        rowIndex++;
      }

      console.log(`‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∞—è—Å—è –Ω–∞ "${substring}", –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ "${sheetName}"`);
      return null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ "${columnLetter}" –≤ —Å—Ç—Ä–æ–∫–µ —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π "${substring}" –≤ —Å—Ç–æ–ª–±—Ü–µ A:`, error);
      throw error;
    }
  }

  /**
 * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤—ã –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ G, H, I –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏:
 * G ‚Üí sources, H ‚Üí priorities, I ‚Üí statuses
 * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
 * @returns {Promise<{ sources: string[], priorities: string[], statuses: string[] }>}
 */
  static async getSourcesPrioritiesStatusesFromColumns(gid) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const ranges = [`${sheetName}!A2:A`, `${sheetName}!G2:G`, `${sheetName}!H2:H`, `${sheetName}!I2:I`];

      const response = await this.gsapi.spreadsheets.values.batchGet({
        spreadsheetId: this.S_ID,
        ranges: ranges
      });

      const getColumnValues = (index) =>
        (response.data.valueRanges?.[index]?.values || [])
          .map(row => (row[0] || '').trim())
          .filter(value => value !== '');

      const responsibles = getColumnValues(0);
      const sources = getColumnValues(1);
      const priorities = getColumnValues(2);
      const statuses = getColumnValues(3);

      return { responsibles, sources, priorities, statuses };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ A/G/H/I:', error);
      throw error;
    }
  }

  /**
   * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å aHref —Å—Å—ã–ª–∫—É –Ω–∞ —è—á–µ–π–∫—É B –≤ —Å—Ç—Ä–æ–∫–µ, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A —Ä–∞–≤–Ω–æ taskId
   * @param {string} spreadsheetId ‚Äî ID —Ç–∞–±–ª–∏—Ü—ã
   * @param {number} gid ‚Äî GID –ª–∏—Å—Ç–∞ (sheetId)
   * @param {string} taskId ‚Äî ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ A
   * @returns {Promise<string>} –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML-—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
   */
  static async generateTaskLink(gid, taskId) {
    try {
      const sheetName = await this.getSheetNameByGid(gid);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å GID ${gid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const rangeAddress = `${sheetName}!A:A`;
      const response = await this.gsapi.spreadsheets.values.get({
        spreadsheetId: this.S_ID,
        range: rangeAddress
      });

      const values = response.data.values || [];
      let taskRow = null;

      // –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å taskId –≤ —Å—Ç–æ–ª–±—Ü–µ A
      for (let i = 0; i < values.length; i++) {
        const cellA = values[i][0] || '';
        if (cellA === taskId) {
          taskRow = i + 1; // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
          break;
        }
      }

      if (!taskRow) {
        throw new Error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ A –Ω–∞ –ª–∏—Å—Ç–µ "${sheetName}"`);
      }

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
      const aHref = `<a href="https://docs.google.com/spreadsheets/d/${this.S_ID}/edit#gid=${gid}&range=B${taskRow}">${sheetName}, —Å—Ç—Ä–æ–∫–∞ ${taskRow}</a>`;
      console.log(`‚úÖ –°—Å—ã–ª–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: ${aHref}`);
      return aHref;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è taskId "${taskId}" –Ω–∞ –ª–∏—Å—Ç–µ —Å GID ${gid}:`, error);
      throw error;
    }
  }


}

module.exports = GoogleHelper;
