
// app.js
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const GoogleHelper = require('./GoogleHelper');
const TelegramHelper = require('./TelegramHelper');
const BotController = require('./BotController');
const StorageController = require('./StorageController');


const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const REFERENCE_BOOK_GID = Number(process.env.REFERENCE_BOOK_GID);

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
TelegramHelper.init(bot); // —Ç–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ TelegramHelper.bot


(async () => {
    // // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google API –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
    await GoogleHelper.init(SPREADSHEET_ID);

    // –ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    let sheets = await GoogleHelper.getAllSheetNamesAndGids();
    console.log('üìÑ –°–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ:');
    console.table(sheets);

    // –ó–∞–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤./–∏—Å—Ç./–ø—Ä–∏–æ—Ä./—Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤ StorageController
    let tmp = await GoogleHelper.getSourcesPrioritiesStatusesFromColumns(REFERENCE_BOOK_GID);
    StorageController.responsibles = tmp.responsibles;
    StorageController.sources = tmp.sources;
    StorageController.priorities = tmp.priorities;
    StorageController.statuses = tmp.statuses;

    console.log(' ///// –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï /////// ');

    // // –ó–∞–≥–ª—É—à–∫–∞ !!!! –£–ë–†–ê–¢–¨ –ò –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –í–ï–†–•–ù–ò–ï –°–¢–†–û–ö–ò
    // users[301334882] = {
    //     department: '–ò–¢ü§ñ',
    //     number: '79785667199',
    //     email: 'wawka2002@gmail.com',
    //     chatId: '301334882',
    // }

    bot.on('callback_query', async (query) => {
        const [action] = query.data.split('@');
        await bot.answerCallbackQuery(query.id);

        if (action === 'createTask') {
            // —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ—Ç –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç
            await BotController.createTask(query);
        }

        if (action === 'cancelCreation') {
            // –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await BotController.cancelCreation(query);
        }

        if (action === 'showResp') {
            // –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            await BotController.showResp(query);
        }

        if (action === 'showTask') {
            // –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –æ—Ç–≤./–∏—Å–ø./–ø—Ä–∏–æ—Ä./—Å—Ç–∞—Ç—É—Å–æ–º
            await BotController.showTask(query);
        }

        if (action === 'deleteTask') {
            // —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
            await BotController.deleteTask(query);
        }
    });


    // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–ò–°–õ–ê–õ –°–û–û–ë–©–ï–ù–ò–ï –¢–ï–°–¢–û–ú - –ü–†–ï–î–õ–ê–ì–ê–ï–¢–°–Ø –ü–û–°–¢–ê–í–ò–¢–¨ –ó–ê–î–ê–ß–£
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        // console.log(`–ë–´–õ–û –°–û–û–ë–©–ï–ù–ò–ï`);
        // console.log(msg);
        // 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if (msg.from?.is_bot) return;

        // 2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (msg.text?.startsWith('/')) return;

        // 3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if (msg.contact) return;

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if (!StorageController.users[chatId]) {
            return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ /start');
        }
        // console.table(users);

        // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –∫–µ—à
        let taskText = msg.text;
        let newMsg = await bot.sendMessage(chatId, `üßê –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏:\n${msg.text}`);
        let messageId = newMsg.message_id;
        StorageController.tasks[`${chatId}@${messageId}`] = taskText;

        // –æ–ø—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üéØ –í —ç—Ç–æ—Ç —Å–ø—Ä–∏–Ω—Ç', callback_data: `createTask@${chatId}@${messageId}@toCurrent` },
                    { text: '‚Ü©Ô∏è –í —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç', callback_data: `createTask@${chatId}@${messageId}@toNext` },
                ],
                [
                    { text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `cancelCreation@${chatId}@${messageId}` }
                ]]
        };

        await TelegramHelper.updateTaskButtons(chatId, messageId, keyboard)
    });


    // –ö–û–ú–ê–ù–î–ê /START
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if (StorageController.users[chatId]) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω: `);
            console.log(StorageController.users[chatId]);
            bot.sendMessage(chatId,
                `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: <b>${StorageController.users[chatId].department}</b>\n` +
                `üìû –ù–æ–º–µ—Ä: <b>${StorageController.users[chatId].number}</b>\n` +
                `üìß Email: <b>${StorageController.users[chatId].email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n` +
                `–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –±–æ—Ç—É`,
                { parse_mode: 'HTML' }
            );
        }
        const keyboard = {
            reply_markup: {
                one_time_keyboard: true,
                keyboard: [[{
                    text: '–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è üìû',
                    request_contact: true
                }]]
            }
        };
        bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ üìû –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞', keyboard);

    });

    // 
    bot.on('contact', async (msg) => {
        const phone = msg.contact.phone_number.replace(/\D/g, '');
        const chatId = msg.chat.id;

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if (StorageController.users[chatId]) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–æ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω: `);
            console.log(StorageController.users[chatId]);
        }

        try {
            const sheetName = await GoogleHelper.getSheetNameByGid(REFERENCE_BOOK_GID);
            if (!sheetName) throw new Error('–õ–∏—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º GID –Ω–µ –Ω–∞–π–¥–µ–Ω');

            const res = await GoogleHelper.gsapi.spreadsheets.values.get({
                spreadsheetId: SPREADSHEET_ID,
                range: `${sheetName}!A2:C`
            });

            const rows = res.data.values || [];
            const index = rows.findIndex(row => row[1]?.replace(/\D/g, '') === phone);
            const match = index !== -1 ? { row: rows[index], index } : null;

            if (match) {
                const [department, number, email] = match.row;

                await GoogleHelper.writeToRange(REFERENCE_BOOK_GID, `D${index + 2}`, [[chatId]]);
                bot.sendMessage(chatId,
                    `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: <b>${department}</b>\nüìû –ù–æ–º–µ—Ä: <b>${number}</b>\nüìß Email: <b>${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n` +
                    `–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –±–æ—Ç—É`,
                    { parse_mode: 'HTML' }
                );

                // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
                StorageController.users[chatId] = {
                    department, number, email, chatId
                }
                console.log(`–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `);
                console.log(StorageController.users[chatId]);
                StorageController.saveUsersToFile();


            } else {
                bot.sendMessage(chatId, 'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ @igo4ek');
            }

        } catch (error) {
            // throw error;
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            bot.sendMessage(chatId, 'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
        }
    });



})();
