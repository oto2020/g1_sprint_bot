
// app.js
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const GoogleHelper = require('./GoogleHelper');
const TelegramHelper = require('./TelegramHelper');
const fs = require('fs');
const path = require('path');
const USERS_FILE_PATH = path.join(__dirname, 'users.json');
function loadUsersFromFile() {
    if (fs.existsSync(USERS_FILE_PATH)) {
        try {
            const data = fs.readFileSync(USERS_FILE_PATH, 'utf-8');
            return JSON.parse(data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:', err);
            return {};
        }
    }
    return {};
}

function saveUsersToFile(users) {
    try {
        fs.writeFileSync(USERS_FILE_PATH, JSON.stringify(users, null, 2), 'utf-8');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ users.json:', err);
    }
}

function getFormattedTimestamp() {
    const now = new Date();

    const pad = (n) => String(n).padStart(2, '0');

    const year = now.getFullYear();
    const month = pad(now.getMonth() + 1);
    const day = pad(now.getDate());

    const hours = pad(now.getHours());
    const minutes = pad(now.getMinutes());
    const seconds = pad(now.getSeconds());

    return `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;
}

const token = process.env.TELEGRAM_TOKEN;
const spreadsheetId = process.env.SPREADSHEET_ID;
const referenceBookGid = Number(process.env.REFERENCE_BOOK_GID);

const bot = new TelegramBot(token, { polling: true });

let users = loadUsersFromFile();    // id: chatId
const tasks = {};                // id: chatId@messageId


// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º 
let lastSprintObjTitleAndGid;
let currentSprintObjTitleAndGid; // {title: '—Å–ø—Ä–∏–Ω—Ç 29 14.07-20.07', gid: 324521214}
let nextSprintObjTitleAndGid;

const keyboard = {
    reply_markup: {
        one_time_keyboard: true,
        keyboard: [[{
            text: '–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è üìû',
            request_contact: true
        }]]
    }
};

(async () => {
    // // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google API –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
    await GoogleHelper.init(spreadsheetId);

    let sheets = await GoogleHelper.getAllSheetNamesAndGids();
    console.log('üìÑ –°–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ:');
    console.table(sheets);

    // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∏–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
    lastSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getLastSprintNumber()} `).test(s.title));
    currentSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getCurrentSprintNumber()} `).test(s.title));
    nextSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getNextSprintNumber()} `).test(s.title));

    console.log('–ü—Ä–æ—à–ª—ã–π —Å–ø—Ä–∏–Ω—Ç:', lastSprintObjTitleAndGid);
    console.log('–¢–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç:', currentSprintObjTitleAndGid);
    console.log('–°–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç:', nextSprintObjTitleAndGid);

    let { sources, priorities, statuses } = await GoogleHelper.getSourcesPrioritiesStatusesFromColumns(referenceBookGid);
    console.log(sources, priorities, statuses);
    console.log(' ///// –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï /////// ');

    // // –ó–∞–≥–ª—É—à–∫–∞ !!!! –£–ë–†–ê–¢–¨ –ò –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –í–ï–†–•–ù–ò–ï –°–¢–†–û–ö–ò
    // users[301334882] = {
    //     department: '–ò–¢ü§ñ',
    //     number: '79785667199',
    //     email: 'wawka2002@gmail.com',
    //     chatId: '301334882',
    // }

    bot.on('callback_query', async (query) => {
        const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');
        await bot.answerCallbackQuery(query.id);

        switch (buttonAction) {
            // –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            case 'create':
                // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∏–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
                lastSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getLastSprintNumber()} `).test(s.title));
                currentSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getCurrentSprintNumber()} `).test(s.title));
                nextSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getNextSprintNumber()} `).test(s.title));

                // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π –∏–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç
                let sprintObj = param1 == 'toCurrent' ? currentSprintObjTitleAndGid : nextSprintObjTitleAndGid;

                // –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
                let firstEmptyRow = await GoogleHelper.findFirstEmptyRow(sprintObj.gid, 'C:E');

                // –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫—É
                let id = `${getFormattedTimestamp()}_${chatId}_${messageId}`;
                let isCompleted = false;
                let taskText = tasks[`${chatId}@${messageId}`]; // –î–æ—Å—Ç–∞–µ–º –∏–∑ –∫–µ—à–∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–¥–∞—á–∏)
                let responsibleName = users[chatId].department;
                let sourceName = "–í–Ω–µ –ø–ª–∞–Ω–∞";
                let priority = "‚è≥";
                let linkB24 = "";
                let comment = "";
                let status = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è ‚ö†Ô∏è";

                // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º
                let row = [id, isCompleted, taskText, responsibleName, sourceName, priority, linkB24, comment, status];
                GoogleHelper.writeToRange(sprintObj.gid, `A${firstEmptyRow}:I${firstEmptyRow}`, [row]);

                // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
                await TelegramHelper.editMessageText(
                    bot,
                    chatId,
                    messageId,
                    `‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞:\n\n` +
                    `<b>${taskText}</b>\n\n` +
                    `<a href="https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit#gid=${sprintObj.gid}&range=B${firstEmptyRow}">${sprintObj.title}, —Å—Ç—Ä–æ–∫–∞ ${firstEmptyRow}</a>\n\n` +
                    `<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n` +
                    `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è / –ò—Å—Ç–æ—á–Ω–∏–∫,\n` +
                    `–°—Ä–æ—á–Ω–æ—Å—Ç—å / –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏</i>`,
                    'HTML',
                    true
                );

                const keyboardForCreatedTask = {
                    inline_keyboard: [
                        [
                            { text: `${responsibleName}`, callback_data: `change_resp@${chatId}@${messageId}` },
                            { text: `${sourceName}`, callback_data: `change_src@${chatId}@${messageId}` },
                        ],
                        [
                            { text: `${priority}`, callback_data: `change_priority@${chatId}@${messageId}` },
                            { text: `${status}`, callback_data: `change_status@${chatId}@${messageId}` },
                        ],
                        [
                            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: `delete@${chatId}@${messageId}@${sprintObj.gid}` },
                        ]
                    ]
                };

                await TelegramHelper.updateTaskButtons(bot, chatId, messageId, keyboardForCreatedTask);
                break;

            case 'edit':
                await bot.sendMessage(chatId, `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${chatId}@${messageId}\nTODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`);
                break;

            case 'cancel':
                await bot.deleteMessage(chatId, messageId);
                break;

            // –ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            case 'delete':
                let gid = param1;
                let idSubstring = `_${chatId}_${messageId}`;
                let task = await GoogleHelper.deleteRowBySubstringInA(gid, idSubstring);
                await bot.deleteMessage(chatId, messageId);
                await bot.sendMessage(
                    chatId,
                    `‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n` + 
                    `<b>${task.C}</b>\n\n` + 
                    `–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task.D}\n` + 
                    `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.E}\n` + 
                    `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.F}\n` + 
                    `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${task.H}\n` + 
                    `–°—Ç–∞—Ç—É—Å: ${task.I}\n\n` +
                    `${task.sheetName}`,
                    { parse_mode: 'HTML' });
                break;
        }
    });


    // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–ò–°–õ–ê–õ –°–û–û–ë–©–ï–ù–ò–ï –¢–ï–°–¢–û–ú - –ü–†–ï–î–õ–ê–ì–ê–ï–¢–°–Ø –ü–û–°–¢–ê–í–ò–¢–¨ –ó–ê–î–ê–ß–£
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        // console.log(`–ë–´–õ–û –°–û–û–ë–©–ï–ù–ò–ï`);
        // console.log(msg);
        // 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if (msg.from?.is_bot) return;

        // 2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (msg.text?.startsWith('/')) return;

        // 3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if (msg.contact) return;

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if (!users[chatId]) {
            return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ /start');
        }
        // console.table(users);

        // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –∫–µ—à
        let taskText = msg.text;
        let newMsg = await bot.sendMessage(chatId, `üßê –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏:\n${msg.text}`);
        let messageId = newMsg.message_id;
        tasks[`${chatId}@${messageId}`] = taskText;

        // –æ–ø—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üéØ –í —ç—Ç–æ—Ç —Å–ø—Ä–∏–Ω—Ç', callback_data: `create@${chatId}@${messageId}@toCurrent` },
                    { text: '‚Ü©Ô∏è –í —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç', callback_data: `create@${chatId}@${messageId}@toNext` },
                ],
                [
                    { text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `cancel@${chatId}@${messageId}` }
                ]]
        };

        await TelegramHelper.updateTaskButtons(bot, chatId, messageId, keyboard)
    });


    // –ö–û–ú–ê–ù–î–ê /START
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if (users[chatId]) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω: `);
            console.log(users[chatId]);
            bot.sendMessage(chatId,
                `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: <b>${users[chatId].department}</b>\n` +
                `üìû –ù–æ–º–µ—Ä: <b>${users[chatId].number}</b>\n` +
                `üìß Email: <b>${users[chatId].email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n` +
                `–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –±–æ—Ç—É`,
                { parse_mode: 'HTML' }
            );
        }
        bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ üìû –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞', keyboard);

    });

    // 
    bot.on('contact', async (msg) => {
        const phone = msg.contact.phone_number.replace(/\D/g, '');
        const chatId = msg.chat.id;

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if (users[chatId]) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–æ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω: `);
            console.log(users[chatId]);
        }

        try {
            const sheetName = await GoogleHelper.getSheetNameByGid(referenceBookGid);
            if (!sheetName) throw new Error('–õ–∏—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º GID –Ω–µ –Ω–∞–π–¥–µ–Ω');

            const res = await GoogleHelper.gsapi.spreadsheets.values.get({
                spreadsheetId,
                range: `${sheetName}!A2:C`
            });

            const rows = res.data.values || [];
            const index = rows.findIndex(row => row[1]?.replace(/\D/g, '') === phone);
            const match = index !== -1 ? { row: rows[index], index } : null;

            if (match) {
                const [department, number, email] = match.row;

                await GoogleHelper.writeToRange(referenceBookGid, `D${index + 2}`, [[chatId]]);
                bot.sendMessage(chatId,
                    `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: <b>${department}</b>\nüìû –ù–æ–º–µ—Ä: <b>${number}</b>\nüìß Email: <b>${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n` +
                    `–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –±–æ—Ç—É`,
                    { parse_mode: 'HTML' }
                );

                // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
                users[chatId] = {
                    department, number, email, chatId
                }
                console.log(`–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `);
                console.log(users[chatId]);
                saveUsersToFile(users);


            } else {
                bot.sendMessage(chatId, 'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ @igo4ek');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            bot.sendMessage(chatId, 'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
        }
    });



})();
