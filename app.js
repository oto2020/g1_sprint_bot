
// app.js
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const GoogleHelper = require('./GoogleHelper');
const TelegramHelper = require('./TelegramHelper');
const BotController = require('./BotController');
const StorageController = require('./StorageController');


const token = process.env.TELEGRAM_TOKEN;
const spreadsheetId = process.env.SPREADSHEET_ID;
const referenceBookGid = Number(process.env.REFERENCE_BOOK_GID);

let responsibles, sources, priorities, statuses;    // –∏–∑ –ª–∏—Å—Ç–∞ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"

const bot = new TelegramBot(token, { polling: true });
TelegramHelper.init(bot); // —Ç–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ TelegramHelper.bot

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º 
let lastSprintObjTitleAndGid;
let currentSprintObjTitleAndGid; // {title: '—Å–ø—Ä–∏–Ω—Ç 29 14.07-20.07', gid: 324521214}
let nextSprintObjTitleAndGid;

const keyboard = {
    reply_markup: {
        one_time_keyboard: true,
        keyboard: [[{
            text: '–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è üìû',
            request_contact: true
        }]]
    }
};

(async () => {
    // // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google API –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
    await GoogleHelper.init(spreadsheetId);

    let sheets = await GoogleHelper.getAllSheetNamesAndGids();
    console.log('üìÑ –°–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ:');
    console.table(sheets);

    // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∏–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
    lastSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getLastSprintNumber()} `).test(s.title));
    currentSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getCurrentSprintNumber()} `).test(s.title));
    nextSprintObjTitleAndGid = sheets.find(s => new RegExp(`—Å–ø—Ä–∏–Ω—Ç ${GoogleHelper.getNextSprintNumber()} `).test(s.title));

    console.log('–ü—Ä–æ—à–ª—ã–π —Å–ø—Ä–∏–Ω—Ç:', lastSprintObjTitleAndGid);
    console.log('–¢–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç:', currentSprintObjTitleAndGid);
    console.log('–°–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç:', nextSprintObjTitleAndGid);

    let tmp = await GoogleHelper.getSourcesPrioritiesStatusesFromColumns(referenceBookGid);

    responsibles = tmp.responsibles;
    sources = tmp.sources;
    priorities = tmp.priorities;
    statuses = tmp.statuses;
    console.log(responsibles);
    console.log(sources);
    console.log(priorities);
    console.log(statuses);

    console.log(' ///// –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï /////// ');

    // // –ó–∞–≥–ª—É—à–∫–∞ !!!! –£–ë–†–ê–¢–¨ –ò –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –í–ï–†–•–ù–ò–ï –°–¢–†–û–ö–ò
    // users[301334882] = {
    //     department: '–ò–¢ü§ñ',
    //     number: '79785667199',
    //     email: 'wawka2002@gmail.com',
    //     chatId: '301334882',
    // }

    bot.on('callback_query', async (query) => {
        const [buttonAction, chatId, messageId, param1, param2, param3, param4] = query.data.split('@');
        await bot.answerCallbackQuery(query.id);

        if (buttonAction === 'create') {
            await BotController.createTask(query);
        } else if (buttonAction === 'edit') {
            await bot.sendMessage(chatId, `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${chatId}@${messageId}\nTODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`);
        } else if (buttonAction === 'cancel') {
            await bot.deleteMessage(chatId, messageId);
        } else if (buttonAction === 'select_resp') {
            let gid = param1;
            let taskId = param2;

            // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, –æ —Ç–æ–º, —á—Ç–æ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
            let taskText = StorageController.tasks[`${chatId}@${messageId}`];
            let aHref = await GoogleHelper.generateTaskLink(gid, taskId);
            let newMessage = `‚úçÔ∏è –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:\n\n` +
                `<b>${taskText}</b>\n\n` +
                `${aHref}\n\n` +
                `<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:\n` +
                `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</i>`;
            await TelegramHelper.editMessageText(
                bot,
                chatId,
                messageId,
                newMessage,
                'HTML',
                true
            );

            let buttonsInRow = 4; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É –≤ —Ä—è–¥
            let keyboard = [];
            for (let i = 0; i < responsibles.length; i += buttonsInRow) {
                let row = responsibles.slice(i, i + buttonsInRow).map((resp, respIndex) => {
                    return {
                        text: resp,
                        callback_data: `change_resp@${chatId}@${messageId}@${gid}@${taskId}@${respIndex}`
                    };
                });
                keyboard.push(row);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard.push([
                {
                    text: '–ù–∞–∑–∞–¥',
                    callback_data: `back_to_task@${chatId}@${messageId}@${gid}@${taskId}`
                }
            ]);

            console.log(keyboard);
            await TelegramHelper.updateTaskButtons(chatId, messageId, {
                inline_keyboard: keyboard
            });


        } 
        else if (buttonAction === 'back_to_task') {
            let gid = param1;
            let taskId = param2;
            // –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–∞–¥–∞—á—É
        }
        else if (buttonAction === 'delete') {
            let gid = param1;
            let taskId = param2;
            let task = await GoogleHelper.deleteRowBySubstringInA(gid, taskId);
            await bot.deleteMessage(chatId, messageId);
            await bot.sendMessage(
                chatId,
                `‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n` +
                `<b>${task.C}</b>\n\n` +
                `–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task.D}\n` +
                `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.E}\n` +
                `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.F}\n` +
                `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${task.H}\n` +
                `–°—Ç–∞—Ç—É—Å: ${task.I}\n\n` +
                `${task.sheetName}`,
                { parse_mode: 'HTML' });
        }
    });


    // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–ò–°–õ–ê–õ –°–û–û–ë–©–ï–ù–ò–ï –¢–ï–°–¢–û–ú - –ü–†–ï–î–õ–ê–ì–ê–ï–¢–°–Ø –ü–û–°–¢–ê–í–ò–¢–¨ –ó–ê–î–ê–ß–£
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        // console.log(`–ë–´–õ–û –°–û–û–ë–©–ï–ù–ò–ï`);
        // console.log(msg);
        // 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if (msg.from?.is_bot) return;

        // 2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (msg.text?.startsWith('/')) return;

        // 3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if (msg.contact) return;

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if (!StorageController.users[chatId]) {
            return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ /start');
        }
        // console.table(users);

        // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –∫–µ—à
        let taskText = msg.text;
        let newMsg = await bot.sendMessage(chatId, `üßê –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏:\n${msg.text}`);
        let messageId = newMsg.message_id;
        StorageController.tasks[`${chatId}@${messageId}`] = taskText;

        // –æ–ø—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üéØ –í —ç—Ç–æ—Ç —Å–ø—Ä–∏–Ω—Ç', callback_data: `create@${chatId}@${messageId}@toCurrent` },
                    { text: '‚Ü©Ô∏è –í —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç', callback_data: `create@${chatId}@${messageId}@toNext` },
                ],
                [
                    { text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `cancel@${chatId}@${messageId}` }
                ]]
        };

        await TelegramHelper.updateTaskButtons(chatId, messageId, keyboard)
    });


    // –ö–û–ú–ê–ù–î–ê /START
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if (StorageController.users[chatId]) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω: `);
            console.log(StorageController.users[chatId]);
            bot.sendMessage(chatId,
                `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: <b>${StorageController.users[chatId].department}</b>\n` +
                `üìû –ù–æ–º–µ—Ä: <b>${StorageController.users[chatId].number}</b>\n` +
                `üìß Email: <b>${StorageController.users[chatId].email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n` +
                `–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –±–æ—Ç—É`,
                { parse_mode: 'HTML' }
            );
        }
        bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ üìû –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞', keyboard);

    });

    // 
    bot.on('contact', async (msg) => {
        const phone = msg.contact.phone_number.replace(/\D/g, '');
        const chatId = msg.chat.id;

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        if (StorageController.users[chatId]) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–æ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω: `);
            console.log(StorageController.users[chatId]);
        }

        try {
            const sheetName = await GoogleHelper.getSheetNameByGid(referenceBookGid);
            if (!sheetName) throw new Error('–õ–∏—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º GID –Ω–µ –Ω–∞–π–¥–µ–Ω');

            const res = await GoogleHelper.gsapi.spreadsheets.values.get({
                spreadsheetId,
                range: `${sheetName}!A2:C`
            });

            const rows = res.data.values || [];
            const index = rows.findIndex(row => row[1]?.replace(/\D/g, '') === phone);
            const match = index !== -1 ? { row: rows[index], index } : null;

            if (match) {
                const [department, number, email] = match.row;

                await GoogleHelper.writeToRange(referenceBookGid, `D${index + 2}`, [[chatId]]);
                bot.sendMessage(chatId,
                    `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: <b>${department}</b>\nüìû –ù–æ–º–µ—Ä: <b>${number}</b>\nüìß Email: <b>${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n` +
                    `–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –±–æ—Ç—É`,
                    { parse_mode: 'HTML' }
                );

                // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
                StorageController.users[chatId] = {
                    department, number, email, chatId
                }
                console.log(`–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `);
                console.log(StorageController.users[chatId]);
                StorageController.saveUsersToFile();


            } else {
                bot.sendMessage(chatId, 'üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ @igo4ek');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            bot.sendMessage(chatId, 'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
        }
    });



})();
